variables: 
  USER_K3S: ubuntu
  K3S_VERSION: v1.21.4+k3s1
  K3S_CONTEXT: k3s-vmware-test
  MASTER_NODE_NAME: master-test-1
  VAULT_ADDR: http://vault-raft-active.vault-raft.svc.cluster.local:8200
  KUBERNETES_SERVICE_ACCOUNT_OVERWRITE: gitlab-public-gitlab-runner
  KUBERNETES_POD_ANNOTATIONS_1: "vault.hashicorp.com/agent-inject=true"
  KUBERNETES_POD_ANNOTATIONS_2: "vault.hashicorp.com/agent-inject-token=true"
  KUBERNETES_POD_ANNOTATIONS_3: "vault.hashicorp.com/agent-pre-populate-only=true"
  KUBERNETES_POD_ANNOTATIONS_4: "vault.hashicorp.com/role=externalapps"
  KUBERNETES_POD_ANNOTATIONS_5: "vault.hashicorp.com/secret-volume-path=/app/secrets/"

# destroy-k3s:
#   stage: deploy
#   script:
#     - export USER=$(whoami)
#     - mkdir -p /home/${USER}/.terraform.d
#     - |-
#       cat > /home/${USER}/.terraform.d/credentials.tfrc.json <<-EOF
#       {
#         "credentials": {
#           "app.terraform.io": {
#             "token": "${TFC_TOKEN}"
#           }
#         }
#       }
#       EOF
#     - terraform init -backend-config="token=${TFC_TOKEN}"
#     - terraform apply --auto-approve -destroy
#   tags: [inK8s]

terraform-build-k3s:
  stage: build
  script:
    - export USER=$(whoami)
    - echo USER=${USER} > build.env
    - mkdir -p /home/${USER}/.terraform.d
    - |-
      cat > /home/${USER}/.terraform.d/credentials.tfrc.json <<-EOF
      {
        "credentials": {
          "app.terraform.io": {
            "token": "${TFC_TOKEN}"
          }
        }
      }
      EOF
    - terraform init -backend-config="token=${TFC_TOKEN}"
    - terraform fmt
    - terraform validate
    - terraform apply --auto-approve
    - terraform output -json
    - echo MASTER_1=$(terraform output -json | jq -r '.master_ips.value[0]') >> build.env
    - echo WORKER_1=$(terraform output -json | jq -r '.worker_ips.value[0]') >> build.env
    - echo WORKER_2=$(terraform output -json | jq -r '.worker_ips.value[1]') >> build.env || true
    - echo WORKER_3=$(terraform output -json | jq -r '.worker_ips.value[2]') >> build.env || true
    - cat build.env
  # Use artifacts.reports.dotenv to pass variables in build.env from this job to the next
  artifacts:
    reports:
      dotenv: build.env

  tags: [inK8s]

deploy-k3s:
  stage: deploy
  script:
    - export VAULT_TOKEN=$(cat /app/secrets/token)
    - export VAULT_ADDR=${VAULT_ADDR}
    - mkdir -p /home/${USER}/.kube
    - touch /home/${USER}/.kube/config
    - mkdir -p /home/${USER}/.ssh
    - cp ${id_rsa} /home/${USER}/.ssh
    - curl -sLS https://get.k3sup.dev | sh
    - sudo install k3sup /usr/local/bin/
    - k3sup install --ip ${MASTER_1} --local-path ~/.kube/config --k3s-version ${K3S_VERSION} --context ${K3S_CONTEXT} --user ${USER_K3S}
    - sleep 20
    - k3sup join --ip ${WORKER_1} --server-ip ${MASTER_1} --user ${USER_K3S} --k3s-version ${K3S_VERSION}
    - k3sup join --ip ${WORKER_2} --server-ip ${MASTER_1} --user ${USER_K3S} --k3s-version ${K3S_VERSION} || true
    - k3sup join --ip ${WORKER_3} --server-ip ${MASTER_1} --user ${USER_K3S} --k3s-version ${K3S_VERSION} || true
    - sleep 20
    - kubectl get nodes -owide
    - kubectl taint nodes ${MASTER_NODE_NAME} key=value:NoSchedule || true
    # Store the kube config file in Vault
    - cat /home/${USER}/.kube/config | base64 | vault kv put external/k3sdemo k3s_config_base64=-
    # Use the command below to get it ready to be sent out of the pipeline as artifact...this is HIGHLY INSECURE
    # - cp /home/${USER}/.kube/config .
  needs:
    - job: terraform-build-k3s
      artifacts: true
  # If you don't have vault set up, you can use the artifacts stanza below to get the kube config file...this is HIGHLY INSECURE
  # artifacts:
  #     public: false
  #     paths:
  #       - config
  #     expire_in: 1 hour
  tags: [inK8s]
